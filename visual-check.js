import { chromium } from 'playwright';

async function visualCheck() {
  console.log('üëÄ Áõ¥Êé•Êü•ÁúãHeaderËßÜËßâÊïàÊûú...');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000 
  });
  const page = await browser.newPage();
  
  try {
    console.log('üìç Ê≠£Âú®ËÆøÈóÆÈ¶ñÈ°µ...');
    await page.goto('http://localhost:4321');
    await page.waitForLoadState('networkidle');
    
    // Êà™Âõæ‰øùÂ≠ò
    await page.screenshot({ 
      path: 'header-visual-check.png', 
      fullPage: false,
      clip: { x: 0, y: 0, width: 1200, height: 150 }
    });
    console.log('üì∏ HeaderÊà™ÂõæÂ∑≤‰øùÂ≠ò‰∏∫ header-visual-check.png');
    
    // Ê£ÄÊü•ÂÆûÈôÖËÆ°ÁÆóÊ†∑Âºè
    const actualStyles = await page.evaluate(() => {
      const header = document.querySelector('header');
      const logo = document.querySelector('.logo h1 a');
      
      if (!header || !logo) return { error: 'Elements not found' };
      
      const headerComputed = window.getComputedStyle(header);
      const logoComputed = window.getComputedStyle(logo);
      
      // Ëé∑ÂèñÂÆûÈôÖÊ∏≤ÊüìÁöÑÊ†∑ÂºèÂÄº
      return {
        header: {
          backgroundColor: headerComputed.backgroundColor,
          background: headerComputed.background.substring(0, 200),
          backdropFilter: headerComputed.backdropFilter || headerComputed.webkitBackdropFilter,
          position: headerComputed.position,
          boxShadow: headerComputed.boxShadow
        },
        logo: {
          color: logoComputed.color,
          backgroundColor: logoComputed.backgroundColor,
          background: logoComputed.background.substring(0, 200),
          backgroundClip: logoComputed.backgroundClip || logoComputed.webkitBackgroundClip,
          webkitTextFillColor: logoComputed.webkitTextFillColor,
          filter: logoComputed.filter
        },
        // Ê£ÄÊü•Â∫îÁî®ÁöÑCSSËßÑÂàô
        appliedRules: {
          headerRules: Array.from(header.style).length,
          logoRules: Array.from(logo.style).length
        }
      };
    });
    
    console.log('\nüé® ÂÆûÈôÖÊ∏≤ÊüìÊ†∑Âºè:');
    console.log('HeaderÊ†∑Âºè:');
    console.log(`  background-color: ${actualStyles.header.backgroundColor}`);
    console.log(`  background: ${actualStyles.header.background}...`);
    console.log(`  backdrop-filter: ${actualStyles.header.backdropFilter}`);
    console.log(`  box-shadow: ${actualStyles.header.boxShadow}`);
    
    console.log('\nLogoÊ†∑Âºè:');
    console.log(`  color: ${actualStyles.logo.color}`);
    console.log(`  background: ${actualStyles.logo.background}...`);
    console.log(`  background-clip: ${actualStyles.logo.backgroundClip}`);
    console.log(`  -webkit-text-fill-color: ${actualStyles.logo.webkitTextFillColor}`);
    console.log(`  filter: ${actualStyles.logo.filter}`);
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂÜ≤Á™ÅÁöÑCSS
    const cssConflicts = await page.evaluate(() => {
      const header = document.querySelector('header');
      const styles = window.getComputedStyle(header);
      
      // Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®‰º†ÁªüÊ†∑ÂºèÁöÑÁâπÂæÅ
      const hasTraditionalBackground = styles.backgroundColor === 'rgb(54, 72, 105)'; // #364869
      const hasModernGlass = styles.backdropFilter && styles.backdropFilter !== 'none';
      
      return {
        hasTraditionalBackground,
        hasModernGlass,
        conflict: hasTraditionalBackground && hasModernGlass
      };
    });
    
    console.log('\n‚ö° CSSÂÜ≤Á™ÅÊ£ÄÊü•:');
    console.log(`  ‰º†ÁªüËÉåÊôØËâ≤Â≠òÂú®: ${cssConflicts.hasTraditionalBackground ? '‚ö†Ô∏è ÊòØ' : '‚úÖ Âê¶'}`);
    console.log(`  Áé∞‰ª£ÁéªÁíÉÊïàÊûúÂ≠òÂú®: ${cssConflicts.hasModernGlass ? '‚úÖ ÊòØ' : '‚ö†Ô∏è Âê¶'}`);
    console.log(`  Ê†∑ÂºèÂÜ≤Á™Å: ${cssConflicts.conflict ? '‚ùå Â≠òÂú®ÂÜ≤Á™Å' : '‚úÖ Êó†ÂÜ≤Á™Å'}`);
    
    console.log('\n‚è∏Ô∏è ÊµèËßàÂô®‰øùÊåÅÊâìÂºÄÔºåËØ∑ÊâãÂä®Êü•ÁúãÂÆûÈôÖÊïàÊûú...');
    console.log('ËØ∑Êåâ Ctrl+C ÂÖ≥Èó≠ÊµèËßàÂô®');
    
    // ‰øùÊåÅÊµèËßàÂô®ÊâìÂºÄÔºåÁ≠âÂæÖÁî®Êà∑ÊâãÂä®ÂÖ≥Èó≠
    await new Promise(() => {}); 
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);
    await browser.close();
  }
}

visualCheck().catch(console.error);